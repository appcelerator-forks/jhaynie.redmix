#!/usr/bin/env node

var program = require('commander'),
	inquirer = require('inquirer'),
	chalk = require('chalk'),
	ACSNode = require('acs-node'),
	util = require('../lib/util'),
	_ = require('lodash'),
	config = util.getConfig();

program.description('connect to ACS')
	.usage('<appid> <username> <password>')
	.option('--debug', 'extra debug logging')
	.option('--no-colors', 'turn of colors in output')
	.option('--default', 'make this the default connection')
	.option('--alias <name>', 'assign an alias name to this connection')
;

// process the arguments
program.parse(process.argv);

var opts = program.opts(),
	baseconfig = _.merge({}, config),
	defaults = _.merge(baseconfig, opts);

util.setupColors(opts);

inquirer.prompt([
	
	{
		type: 'input',
		name: 'key',
		message: 'API Key',
		when: function() { return program.args.length < 1; },
		default: defaults && defaults.key
	},

	{
		type: 'username',
		name: 'username',
		message: 'Username/Email',
		when: function() { return program.args.length < 2; },
		default: defaults && defaults.username
	},

	{
		type: 'password',
		name: 'password',
		message: 'Password',
		when: function() { return program.args.length < 3; },
		default: defaults && defaults.password
	},

], function(answers){

	var key = answers.key || program.args[0],
		username = answers.username || program.args[1],
		password = answers.password || program.args[2];

	var acsApp = new ACSNode(key);
	acsApp.usersLogin({
		login: username,
		password: password
	}, function(err, result) {
		if (err) {
			util.fail("Invalid login. "+err);
		}

		// write the config
		if (opts.alias) {
			// make this an alias
			var aliases = config.aliases || {};
			// set the alias entry
			aliases[opts.alias] = {
				key: key,
				username: username,
				session: result.body.meta.session_id,
			};
			config.aliases = aliases;
			if (opts.default || Object.keys(aliases).length===1) {
				config.alias = opts.alias;
			}
		}
		else {
			// just set it
			config.key = key;
			config.username = username;
			config.session = result.body.meta.session_id;
		}

		util.saveConfig(config);

		console.log('Application connected.  You can now make requests for this app'+(opts.alias?(' using the alias '+chalk.green(opts.alias)):'.'));

		process.exit(0);
	});

});
